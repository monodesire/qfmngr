*qfmngr.txt*                          For creating custom-made QuickFix lists,
                                              and save/load them to/from disk.

                                                                      *qfmngr*


                           >>> QuickFix Manager <<<


Author:   Mats Lintonsson <mats.lintonsson@gmail.com>
License:  MIT License
Website:  https://github.com/monodesire/qfmngr/
Version:  4.1.1


==============================================================================
Contents                                                     *qfmngr-contents*

  1. Introduction         |qfmngr-introduction|
  2. Requirements         |qfmngr-requirements|
  3. Installation         |qfmngr-installation|
  4. Usage                |qfmngr-usage|
  5. Configuration        |qfmngr-configuration|
  6. History              |qfmngr-history|
  7. TODO                 |qfmngr-todo|
  8. Credits              |qfmngr-credits|


==============================================================================
1. Introduction                                          *qfmngr-introduction*

The QuickFix Manager plugin provides a simple user interface for creating
custom-made QuickFix lists. What it means is that it gives you an easy way of
adding entries into the current QuickFix list. The entry added will consist of
the cursor's current position (filename + line number). It will also be tagged
with the text of the current line or any descriptive text you input yourself.

The QuickFix Manager plugin also provides a simple way of saving and loading
QuickFix lists to/from disk.

So, if you have filled up a QuickFix list (by using this plugin's add feature
for building up a list by yourselves or by the result of e.g. a compilation or
a grep) and want to access it at a later time, you can, with help of this
plugin, save it to disk into a text file. While saving, you give it a save
name, so you easily can identify each saved QuickFix list when you want to
load them later.

Vim does have built-in support for remembering multiple QuickFix lists, but
only up to ten lists, and you cannot give them individual names, so it's
harder to keep track of what's in what list. A bit rudimentary so to speak.

For general information about QuickFix, go here: |quickfix|

See |quickfix-error-lists| for more information about Vim's built-in support
of multiple QuickFix lists.

The QuickFix Manager plugin also has functionality to store saved QuickFix
lists within different projects. This is an optional feature, but might be
handy to use when you want to logically group several saved QuickFix lists
that are belonging to the same project, task, work package etc.


==============================================================================
2. Requirements                                          *qfmngr-requirements*

This plugin has been tested with Vim 7.3 in a Linux environment. Only the
regular text-based Vim has been used in this testing, not gVim. There are
probably no special requirements for this plugin to work.


==============================================================================
3. Installation                                          *qfmngr-installation*

The installation of this plugin is simple. The official guidelines are found
here: |add-global-plugin|

In an essence, you need to copy qfmngr.vim (the actual plugin code) and
qfmngr.txt (the help file) to somewhere in your |'runtimepath'|. For a
standard Unix environment, this most likely means $HOME/.vim/plugin/ and
$HOME/.vim/doc/ respectively.

If you have a clone of the QuickFix Manager Git repository, you may add the
path to it into 'runtimepath'. Here's an example what you could put into your
|vimrc| if you'd like to do that: >

  let &runtimepath = &runtimepath . ',' . '/path/to/cloned/repo/'

After installation, don't forget to run |:helptags| to generate help tags
files, to includes help tags for this plugin. Here's an example of how to run
this command: >

  :helptags $VIMRUNTIME/doc


==============================================================================
4. Usage                                                        *qfmngr-usage*

Add an entry into the current QuickFix list~

For adding the current position of the cursor into the current QuickFix list,
call the QuickFix Manager's add function: >

  :call QFMNGR_AddToQuickFix()

You will be prompted with three choices:

  (a) Either you enter a descriptive text for this entry and then presses
      <enter>; or

  (b) You just presses <enter> to accept the text of the line which is under
      the cursor; or

  (c) Cancels the add operation altogether by entering the word "CANCEL"
      followed by an <enter>.

If you do not do (c), one entry will be added into the current QuickFix list.
The entry will contain the filename (plus its full path) and the line number
of the cursor's current position. It will also contain a tag, which is either
your own text (a) or what was under the cursor (b).

Clear the current QuickFix list~

For clearing (emptying) the current QuickFix list, call the QuickFix Manager's
clear function: >

  :call QFMNGR_ClearQuickFix()

Save a QuickFix list~

For saving the current QuickFix list, call the QuickFix Manager's save
function like this: >

  :call QFMNGR_SaveQuickFix()

When you do so, you will be asked to either overwrite an existing QuickFix
list already stored on disk (within the active project) or input a save name.
The name you input identifies that particular list you are about to save. Any
group of white spaces you put into the name, will be replaced by an
underscore. Legal characters are a-z, A-Z, 0-9 and underscore.

The QuickFix list will be stored in a text file on disk, in the directory
specified by global variable g:qfmngr_storageLocation. You may change the
default value of this variable (see |qfmngr-configuration| on how to do it).

The text files are named according to this pattern: >

  qfmngr_<name>.txt

Load a QuickFix list~

For Loading a QuickFix list, call the QuickFix Manager's load function like
this: >

  :call QFMNGR_LoadQuickFix()

The plugin will look for QuickFix lists in the directory specified by
g:qfmngr_storageLocation. You will be presented by a list of available ones to
select from. Make your choice and the chosen list will be loaded.

Change active project~

To change the active project, i.e. go from one project to another, this is the
function to call: >

  :call QFMNGR_ChangeActiveProject()

The active project is a pointer that tells the plugin to which project to save
into when saving a QuickFix list and which project to load from when loading a
QuickFix list. There is a default project denoted as "(default)". If you have
no other projects, the default project will be used for saving/loading of
QuickFix lists. The active project can be changed via the above mentioned
function call, but also through the |.vimrc| file (see
|qfmngr-configuration|).

Projects are stored as sub-directories of g:qfmngr_storageLocation (see
*qfmngr-configuration* for more details regarding this global variable). The
default project is located in the root of g:qfmngr_storageLocation. The
directory name for a project is named according to this: >

  qfmngrproj_<name>

Where <name> is the actual project name.

Create a new project~

Use this function call to create a new project: >

  :call QFMNGR_CreateNewProject()

When you do so, you will be asked to input a project name, i.e. a name that
identifies that particular project you are about to create. Any group of white
spaces you put into the name, will be replaced by an underscore. Legal
characters are a-z, A-Z, 0-9 and underscore.


==============================================================================
5. Configuration                                        *qfmngr-configuration*

Storage location~

The plugin stores QuickFix lists onto disk. For the plugin to know where to
store those files, it uses the following global variable: >

  g:qfmngr_storageLocation

Default value is "/tmp/". To set another value, put this line of code into
your |vimrc|: >

  let g:qfmngr_storageLocation = "/some/other/path/"

Active projects~

The active project may be set via this global variable: >

  g:qfmngr_activeProject

The default value of this is "" (an empty string), indicating the default
project.

Mappings~

It is a good idea to map keys for the five functions explained in
|qfmngr-usage|. For general information about mapping keys, see |key-mapping|.

Here are some mapping examples of what you could put into your |vimrc|: >

  nnoremap <silent> <F5> :call QFMNGR_AddToQuickFix()<CR>
  nnoremap <silent> <F6> :call QFMNGR_ClearQuickFix()<CR>
  nnoremap <silent> <F7> :call QFMNGR_SaveQuickFix()<CR>
  nnoremap <silent> <F8> :call QFMNGR_LoadQuickFix()<CR>
  nnoremap <silent> <F9> :call QFMNGR_ChangeActiveProject()<CR>
  nnoremap <silent> <F10> :call QFMNGR_CreateNewProject()<CR>

With these five mappings, the F5 key would run the add to QuickFix list
function, the F6 key would run the clear list function, the F7 key would run
the save function, the F8 key would run the load function, the F9 key would
run the change project function, while the F10 key would create a new project.

Here are some other mapping examples: >

  nnoremap <Leader>qa :call QFMNGR_AddToQuickFix()<CR>
  nnoremap <Leader>qc :call QFMNGR_ClearQuickFix()<CR>
  nnoremap <Leader>qs :call QFMNGR_SaveQuickFix()<CR>
  nnoremap <Leader>ql :call QFMNGR_LoadQuickFix()<CR>
  nnoremap <Leader>qpc :call QFMNGR_ChangeActiveProject()<CR>
  nnoremap <Leader>qpn :call QFMNGR_CreateNewProject()<CR>

With the above mapping, the |<Leader>| key followed by either qa, qc, qs, ql,
qpc or qpn is used to call the the different functions. The leader key is by
default set to backslash (\).


==============================================================================
6. History                                                    *qfmngr-history*

This section specifies the version history of this plugin. Semantic versioning
(http://semver.org/) is the version format used.

4.1.1 (2015-06-30)
      - Extended the save functionality to now handle both "save" (i.e.
        overwrite an existing QuickFix list) and "save as" (enter a new name
        for saving) styles of saving QuickFix lists.

4.0.1 (2015-06-26)
      - Minor bug fixes.

4.0.0 (2015-06-26)
      - Added the ability to create a project.

3.0.0 (2015-06-25)
      - Added the ability to change project within the plugin.

2.0.0 (2015-06-18)
      - Added functionality to clear current QuickFix list.
      - Added functionality to add line under cursor into current QuickFix
        list.

1.4.0 (2015-06-12)
      - Added error handling for the disk operations.

1.3.0 (2015-06-12)
      - Made user input processing more robust.

1.2.0 (2015-06-12)
      - Minor update in this help file.

1.1.0 (2015-06-09)
      - Various updates made in this help file.

1.0.0 (2015-06-08)
      - Initial release.


==============================================================================
7. TODO                                                          *qfmngr-todo*

All TODOs are listed here:

https://github.com/monodesire/qfmngr/issues


==============================================================================
8. Credits                                                    *qfmngr-credits*

The QuickFix Manager plugin uses some QuickFix save and load code found in the
following forum thread, in a post by a user called 'Peter Odding':

http://vim.1045645.n5.nabble.com/Saving-the-Quickfix-List-td1179523.html


==============================================================================
vim: tw=78 ts=2 ft=help
